<div class="terminal-container">
    <div id="terminal"></div>
    <div id="status" class="alert alert-warning">Connecting...</div>
</div>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/xterm@5.1.0/css/xterm.min.css">
<script src="https://cdn.jsdelivr.net/npm/xterm@5.1.0/lib/xterm.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/xterm-addon-fit@0.7.0/lib/xterm-addon-fit.min.js"></script>

<style>
.terminal-container {
    display: flex;
    flex-direction: column;
    height: 70vh;
    background: #000;
    border-radius: 5px;
    overflow: hidden;  /* –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–∫—Ä–æ–ª–ª–∞ */
}

#terminal {
    flex-grow: 1;
    padding: 10px;
    width: 100%;  /* –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è */
}

.xterm .xterm-screen canvas {
    border-radius: 5px;  /* –°–∫—Ä—É–≥–ª–µ–Ω–∏–µ —É–≥–ª–æ–≤ –≤–Ω—É—Ç—Ä–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ */
}
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const term = new Terminal({
        fontSize: 14,
        fontFamily: 'monospace',
        cursorBlink: true,
        scrollback: 1000,
        tabStopWidth: 8,
        cols: 120,  /* –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ */
        rows: 30,
        theme: {
            background: '#000000',
            foreground: '#f0f0f0'
        },
        allowTransparency: true,
        disableStdin: false,
        screenReaderMode: false,
        convertEol: true,
        wrap: false  /* üî¥ –û–¢–ö–õ–Æ–ß–ê–ï–ú –ü–ï–†–ï–ù–û–° –°–¢–†–û–ö */
    });
    
    const fitAddon = new FitAddon.FitAddon();
    term.loadAddon(fitAddon);
    term.open(document.getElementById('terminal'));
    
    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–≥–æ–Ω–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
    function fitTerminal() {
        try {
            fitAddon.fit();
            term.scrollToBottom();
        } catch (e) {
            console.warn("Fit error:", e);
        }
    }
    
    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
    fitTerminal();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–∫–Ω–∞
    const resizeObserver = new ResizeObserver(fitTerminal);
    resizeObserver.observe(document.getElementById('terminal'));

    const statusEl = document.getElementById('status');
    let socket;
    
    function connect() {
        statusEl.textContent = "Connecting...";
        statusEl.className = "alert alert-warning";
        
        socket = new WebSocket(`ws://${window.location.hostname}:8765/`);
        
        socket.onopen = () => {
            statusEl.textContent = "Connected";
            statusEl.className = "alert alert-success";
            setTimeout(() => statusEl.style.display = 'none', 2000);
            
            const userId = "test_user";
            socket.send(JSON.stringify({ 
                user_id: userId,
                cols: term.cols,
                rows: term.rows
            }));
        };
        
        socket.onmessage = (e) => {
            term.write(e.data);
        };
        
        socket.onclose = () => {
            statusEl.style.display = 'block';
            statusEl.textContent = "Disconnected. Reconnecting...";
            statusEl.className = "alert alert-danger";
            setTimeout(connect, 2000);
        };
        
        socket.onerror = (e) => {
            console.error("WebSocket error:", e);
            statusEl.textContent = "Connection error";
            statusEl.className = "alert alert-danger";
        };
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    term.onData(data => {
        if (socket && socket.readyState === WebSocket.OPEN) {
            socket.send(data);
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    term.onResize((size) => {
        if (socket && socket.readyState === WebSocket.OPEN) {
            socket.send(JSON.stringify({
                type: 'resize',
                cols: size.cols,
                rows: size.rows
            }));
        }
    });
    
    connect();
});
</script>